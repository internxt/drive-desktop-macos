# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'addressable/template'

default_platform(:mac)


platform :mac do
  desc "Build Beta DMG"
  lane :beta_ci do

    setup_ci()
    
    # Prepare certificates using Match
    match(
      type: "developer_id", 
      readonly: true,
      app_identifier: [
        "internxt.InternxtDesktop", 
        "internxt.InternxtDesktop.sync"
      ],
    )

    
    version_number = get_version_number(
      xcodeproj: "InternxtDesktop.xcodeproj",
      target: "InternxtDesktop"
    )

    build_number = get_build_number(xcodeproj: "InternxtDesktop.xcodeproj")
    version = "#{version_number}.#{build_number}-beta"

    app_path = "build/Internxt Drive.app"
    dmg_original_name = "Internxt #{version_number}.dmg"
    dmg_final_name = "Internxt Drive #{version}.dmg"
    dmg_destination_dir = "build"
      
    # Build, archive and sign the .app
    build_mac_app(
      clean: true,
      output_directory: 'build',
      export_method: "developer-id",
      scheme: "InternxtDesktop",
      configuration: "Beta"
    )

    # Notarize the app
    notarize(
      package: app_path,
      api_key_path: './app_store_key.json'
    )
    final_dmg_path = "./#{dmg_destination_dir}/#{dmg_final_name}"
    # Build the DMG using nodejs create-dmg package
    Dir.chdir("..") do
      sh("create-dmg", app_path, dmg_destination_dir, "--overwrite")
      # Create a DMG directory
      # Move the DMG to the dmg directory so we can export easily the artifact later in Github Actions
      sh("mv", "./#{dmg_destination_dir}/#{dmg_original_name}", final_dmg_path)
    end


    
    # Notarize the DMG file
    notarize(
      bundle_id: "internxt.InternxtDesktop",
      package: final_dmg_path,
      api_key_path: './app_store_key.json'
    )

    # Create a Github Release
    github_release = set_github_release(
      repository_name: "internxt/drive-desktop-macos",
      api_bearer: ENV["GITHUB_TOKEN"],
      is_draft: true,
      is_prerelease: false,
      description: "Drive Desktop #{version} release for MacOS",
      name: "Drive Desktop MacOS #{version}",
      tag_name: "v#{version}",
    )

    release_assets = github_release["assets"]

    dmg_asset = release_assets.find { |asset| asset["name"].include? "dmg" }
    
    upload_url = github_release["upload_url"]
    file_name = File.basename(final_dmg_path)
    expanded_upload_url = Addressable::Template.new(upload_url).expand(name: file_name).to_s

    github_api(
      api_token: ENV["GITHUB_TOKEN"],
      http_method: 'POST',
      headers: {'Content-Type' => 'application/octet-stream'},
      url: expanded_upload_url,
      raw_body: File.read(".#{final_dmg_path}"),
      error_handlers: {
        '*' => proc do |result|
            UI.error("GitHub responded with #{result[:status]}:#{result[:body]}")
            UI.user_error!("Failed to upload asset #{file_name} to GitHub.")
          end
      }
    )


    dmg_download_url = dmg_asset["browser_download_url"]
    
    # Send an slack message with the new DMG ready
    slack(
      pretext: "Drive Desktop MacOS v#{version} is ready for QA\n<#{dmg_download_url}|Download DMG Installer>",
      slack_url: ENV["SLACK_WEBHOOK_MAC_TEAM"]
    )
    

  end
end
