
require 'addressable/template'
require 'json'

ENV["GITHUB_REPOSITORY"] = "drive-desktop-macos"
ENV["GITHUB_OWNER"] = "internxt"
ENV["REPOSITORY_PROD_BRANCH"] = "main"
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

default_platform(:mac)


platform :mac do

  desc "Configure provisioning profiles"
  lane :setup_dev_provisioning_profiles do
    match(
      type: "developer_id", 
      readonly: true,
      app_identifier: [
        "internxt.InternxtDesktop", 
        "internxt.InternxtDesktop.sync",
        "com.internxt.XPCBackupService"
      ],
    )

    UI.important("Match setup finished")
  end

  desc "Build Beta DMG"
  lane :beta_ci do

    # setup_ci()
    
    version_number = get_version_number(
      xcodeproj: "InternxtDesktop.xcodeproj",
      target: "InternxtDesktop"
    )

    build_number = get_build_number(xcodeproj: "InternxtDesktop.xcodeproj")

    
    version = "#{version_number}.#{build_number}-beta"
    tag_name = "v#{version}-beta"
    release_exists = release_already_exists(tag_name: tag_name)

    if release_exists 
      UI.user_error!("Release with tag #{tag_name} already exists, delete it or upgrade either version number or builder number")
    else 
      UI.important("Release with tag #{tag_name} doesn't exists, building app and creating release")
    end 
    
    # Prepare certificates using Match
    match(
      type: "developer_id", 
      readonly: true,
      app_identifier: [
        "internxt.InternxtDesktop", 
        "internxt.InternxtDesktop.sync",
        "com.internxt.XPCBackupService"
      ],
    )
  
    
    
    app_path = "build/Internxt Drive.app"
    dmg_original_name = "Internxt #{version_number}.dmg"
    dmg_final_name = "Internxt_Drive_#{version}.dmg"
    dmg_destination_dir = "build"
      
    # Build, archive and sign the .app
    build_mac_app(
      clean: true,
      output_directory: 'build',
      export_method: "developer-id",
      scheme: "InternxtDesktop",
      configuration: "Beta",
    )

    # Notarize the app
    notarize(
      package: app_path,
      api_key_path: './app_store_key.json'
    )
    final_dmg_path = "./#{dmg_destination_dir}/#{dmg_final_name}"
    # Build the DMG using nodejs create-dmg package
    Dir.chdir("..") do
      sh("create-dmg", app_path, dmg_destination_dir, "--overwrite")
      # Create a DMG directory
      # Move the DMG to the dmg directory so we can export easily the artifact later in Github Actions
      sh("mv", "./#{dmg_destination_dir}/#{dmg_original_name}", final_dmg_path)
    end

    # Notarize the DMG file
    notarize(
      bundle_id: "internxt.InternxtDesktop",
      package: final_dmg_path,
      api_key_path: './app_store_key.json'
    )

    # Create a Github Release
    github_release = set_github_release(
      repository_name: "#{ENV["GITHUB_OWNER"]}/#{ENV["GITHUB_REPOSITORY"]}",
      api_bearer: ENV["GITHUB_TOKEN"],
      is_draft: true,
      is_prerelease: false,
      description: "Drive Desktop #{version} release for MacOS",
      name: "Drive Desktop MacOS #{version}",
      tag_name: tag_name,
      upload_assets: [final_dmg_path]
    )

    release_assets = github_release["assets"]
    dmg_asset = release_assets.find { |asset| asset["name"].include? "dmg" }
    dmg_download_url = dmg_asset["browser_download_url"]


    # Send an slack message with the new DMG ready
    # TODO: Add changelog and latest changes from previous release
    slack(
      pretext: "Drive Desktop MacOS v#{version} is ready for QA\n<#{dmg_download_url}|Download DMG Installer>\n\nInstructions:\nLogout and then uninstall totally the previous app version to prevent unpredictable effects",
      slack_url: ENV["SLACK_WEBHOOK_MAC_TEAM"]
    )


  end

  desc "Build Prod DMG"
  lane :prod_ci do

    setup_ci()
    
    version_number = get_version_number(
      xcodeproj: "InternxtDesktop.xcodeproj",
      target: "InternxtDesktop"
    )

    build_number = get_build_number(xcodeproj: "InternxtDesktop.xcodeproj")

    
    version = "#{version_number}.#{build_number}"
    tag_name = "v#{version}"
    release_exists = release_already_exists(tag_name: tag_name)

    if release_exists 
      UI.user_error!("Release with tag #{tag_name} already exists, delete it or upgrade either version number or builder number")
    else 
      UI.important("Release with tag #{tag_name} doesn't exists, building app and creating release")
    end 
    

    # Prepare certificates using Match
    match(
      type: "developer_id", 
      readonly: true,
      app_identifier: [
        "internxt.InternxtDesktop", 
        "internxt.InternxtDesktop.sync",
        "com.internxt.XPCBackupService"
      ],
    )

    
    app_path = "build/Internxt Drive.app"
    dmg_original_name = "Internxt #{version_number}.dmg"
    dmg_final_name = "Internxt_Drive_#{version}.dmg"
    dmg_destination_dir = "build"
      
    # Build, archive and sign the .app
    build_mac_app(
      clean: true,
      output_directory: 'build',
      export_method: "developer-id",
      scheme: "InternxtDesktop",
      configuration: "Release"
    )

    # Notarize the app
    notarize(
      package: app_path,
      api_key_path: './app_store_key.json'
    )
    final_dmg_path = "./#{dmg_destination_dir}/#{dmg_final_name}"
    # Build the DMG using nodejs create-dmg package
    Dir.chdir("..") do
      sh("create-dmg", app_path, dmg_destination_dir, "--overwrite")
      # Create a DMG directory
      # Move the DMG to the dmg directory so we can export easily the artifact later in Github Actions
      sh("mv", "./#{dmg_destination_dir}/#{dmg_original_name}", final_dmg_path)
    end

    # Notarize the DMG file
    notarize(
      bundle_id: "internxt.InternxtDesktop",
      package: final_dmg_path,
      api_key_path: './app_store_key.json'
    )

    # Create a Github Release
    github_release = set_github_release(
      repository_name: "#{ENV["GITHUB_OWNER"]}/#{ENV["GITHUB_REPOSITORY"]}",
      api_bearer: ENV["GITHUB_TOKEN"],
      is_draft: true,
      is_prerelease: false,
      description: "Drive Desktop #{version} release for MacOS",
      name: "Drive Desktop MacOS #{version}",
      tag_name: tag_name,
      upload_assets: [final_dmg_path]
    )

    release_assets = github_release["assets"]
    dmg_asset = release_assets.find { |asset| asset["name"].include? "dmg" }
    dmg_download_url = dmg_asset["browser_download_url"]


    # Send an slack message with the new DMG ready
    # TODO: Add changelog and latest changes from previous release
    slack(
      pretext: "ðŸš€[RELEASE]ðŸš€ Drive Desktop MacOS v#{version} production release is ready in draft mode\n<#{dmg_download_url}|Download DMG Installer>\n\nInstructions:\nLogout and then uninstall totally the previous app version to prevent unpredictable effects",
      slack_url: ENV["SLACK_WEBHOOK_MAC_TEAM"]
    )


  end
end
